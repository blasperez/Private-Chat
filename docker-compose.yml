version: '3.8'

services:
  # Base de datos PostgreSQL (opcional, para desarrollo local)
  postgres:
    image: postgres:15-alpine
    container_name: private-chat-db
    environment:
      POSTGRES_DB: private_chat
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/server/db/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - private-chat-network
    profiles:
      - local-db

  # Aplicación principal
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: private-chat-app
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=${DATABASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3001}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - SESSION_SECRET=${SESSION_SECRET}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-52428800}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    ports:
      - "3001:3001"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - private-chat-network
    depends_on:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy (opcional, para producción)
  nginx:
    image: nginx:alpine
    container_name: private-chat-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - private-chat-network
    depends_on:
      - app
    profiles:
      - production
    restart: unless-stopped

  # Redis para cache (opcional, para escalabilidad)
  redis:
    image: redis:7-alpine
    container_name: private-chat-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - private-chat-network
    profiles:
      - production
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  private-chat-network:
    driver: bridge